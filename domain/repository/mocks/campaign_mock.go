// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository/IcampaignRepository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/manuelcunga/Pulse-Mailer/domain/entities/campaign"
)

// MockIcampaignRepository is a mock of IcampaignRepository interface.
type MockIcampaignRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIcampaignRepositoryMockRecorder
}

// MockIcampaignRepositoryMockRecorder is the mock recorder for MockIcampaignRepository.
type MockIcampaignRepositoryMockRecorder struct {
	mock *MockIcampaignRepository
}

// NewMockIcampaignRepository creates a new mock instance.
func NewMockIcampaignRepository(ctrl *gomock.Controller) *MockIcampaignRepository {
	mock := &MockIcampaignRepository{ctrl: ctrl}
	mock.recorder = &MockIcampaignRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIcampaignRepository) EXPECT() *MockIcampaignRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIcampaignRepository) Create(campaign *entities.Campaign) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", campaign)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIcampaignRepositoryMockRecorder) Create(campaign interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIcampaignRepository)(nil).Create), campaign)
}

// Delete mocks base method.
func (m *MockIcampaignRepository) Delete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIcampaignRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIcampaignRepository)(nil).Delete), id)
}

// FindAll mocks base method.
func (m *MockIcampaignRepository) FindAll() ([]*entities.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]*entities.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockIcampaignRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockIcampaignRepository)(nil).FindAll))
}

// GetByID mocks base method.
func (m *MockIcampaignRepository) GetByID(id string) (*entities.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*entities.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIcampaignRepositoryMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIcampaignRepository)(nil).GetByID), id)
}

// Update mocks base method.
func (m *MockIcampaignRepository) Update(campaign *entities.Campaign) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", campaign)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIcampaignRepositoryMockRecorder) Update(campaign interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIcampaignRepository)(nil).Update), campaign)
}
